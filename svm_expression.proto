syntax = "proto3";
package AIProto;
option go_package = "./";

import "lib/np_library.proto";
import "lib/enum_expression.proto";
import "google/protobuf/any.proto";

// The machine Learning service definition with SVM function.
service SVMService {

    // Send a Linear SVC
    rpc LinearSVCEvent(LinearRequest) returns (LinearReply) {}

    // Send a Linear SVR
    rpc LinearSVREvent (LinearRequest) returns (LinearReply) {}

    // Send a SVC
    rpc SVCEvent (SVCRequest) returns (SVCReply) {}

}

// Linear kwargs with optional type.
message Linearkwargs {
    optional Penalty penalty = 1;
    optional Loss loss = 2;
    optional bool dual = 3;
    optional float tol = 4;
    optional float C = 5;
    optional Multi_Class multi_class = 6;
    optional bool fit_intercept = 7;
    optional float intercept_scaling = 8;
    optional google.protobuf.Any class_weight = 9; 
    optional int32 verbose = 10;
    optional google.protobuf.Any random_state = 11;
    optional int64 max_iter = 12;
}

// SVC kwargs with optional type.
message SVCkwargs {
    optional Penalty penalty = 1;
    optional Loss loss = 2;
    optional bool dual = 3;
    optional float tol = 4;
    optional float C = 5;
    optional Multi_Class multi_class = 6;
    optional bool fit_intercept = 7;
    optional float intercept_scaling = 8;
    optional google.protobuf.Any class_weight = 9;
    optional int32 verbose = 10;
    optional google.protobuf.Any random_state = 11;
    optional int64 max_iter = 12;
}

// The request message containing the Linear 's Data.
message LinearRequest {
    google.protobuf.Any x_drop_data = 1;
    google.protobuf.Any y_drop_data = 2;
    google.protobuf.Any size = 3;
    google.protobuf.Any random = 4;
    string key = 5;
    optional google.protobuf.Any sample_weight = 6;
    Linearkwargs kwargs = 7;
}

// The response message containing the Linear.
message LinearReply {
    optional int32 n_iter_ = 1;
    optional NDArray feature_names_in_ = 2;
    optional int32 n_features_in_ = 3;
    optional NDArray classes_ = 4;
    optional google.protobuf.Any intercept_ = 5;
    optional NDArray coef_ = 6;
}

// The request message containing the SVC's Data.
message SVCRequest {
    google.protobuf.Any x_drop_data = 1;
    google.protobuf.Any y_drop_data = 2;
    google.protobuf.Any size = 3;
    google.protobuf.Any random = 4;
    string key = 5;
    optional google.protobuf.Any sample_weight = 6;
    SVCkwargs kwargs = 7;
}

// The response message containing the SVC.
message SVCReply {
    optional google.protobuf.Any shape_fit_ = 1;
    optional NDArray probB_ = 2;
    optional NDArray probA_ = 3;
    optional NDArray n_support_ = 4;
    optional NDArray support_vectors_ = 5;
    optional NDArray support_ = 6;
    optional NDArray n_iter_ = 7;
    optional NDArray feature_names_in_ = 8;
    optional int32 n_features_in_ = 9;
    optional NDArray intercept_ = 10;
    optional int32 fit_status_ = 11;
    optional NDArray dual_coef_ = 12;
    optional NDArray coef_ = 13;
    optional NDArray classes_ = 14;
    optional NDArray class_weight_ = 15;
}
